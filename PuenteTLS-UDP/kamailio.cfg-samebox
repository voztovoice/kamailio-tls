#!KAMAILIO
#
# Kamailio Proxy SIP v. v5.6
# Kamailio como un Puente TLS/SRTP UDP/RTP
# Octubre 2022

# Â¿Necesita ayuda?

# * Documentacion Oficial:
#       -       Documentacion: https://www.kamailio.org/w/documentation/
#       -       Wiki: https://www.kamailio.org/wiki/
#       -       Modulos: https://www.kamailio.org/docs/modules/stable/
#       -       IRC: irc.freenode.net #kamailio
#       -       Lista de distribucion: https://www.kamailio.org/w/mailing-lists/

####### Definir Substitutions #######
# Cambiar con los valores de tu escenarios
#!substdef "/PRIVATEIP/IPPrivada/"
#!substdef "/PUBLICIP/IPPublica/"
#!substdef "/PUBDOMAIN/midominio.org/"
#!substdef "/PBXIP/IPPrivada/"
#!substdef "/PBXPORT/5080/"

####### Define Code Blocks #########
#       define WITH_DEBUG
#!define WITH_ANTIFLOOD
#       define WITH_SIPDEBUG

####### Global Parameters #########
### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5
pv_buffer_size=65536
pv_cache_limit=65536
log_facility=LOG_LOCAL0
log_prefix="{$mt $proto $hdr(CSeq) $ci} "
children=4
enable_tls=yes
tcp_connection_lifetime=3605
dns=no
dns_cache_init=off
dns_srv_lb=no
dns_try_naptr=no
maxbuffer=65536
max_while_loops=250
rev_dns=no
use_dns_cache=no
auto_aliases=no
mhomed=0
listen=udp:PRIVATEIP:5060
listen=tls:PRIVATEIP:5061 advertise PUBLICIP:5061
alias=PRIVATEIP:5060
alias=PRIVATEIP:5061
alias=PUBLICIP:5061
alias="PUBDOMAIN":5061
port=5060
#!ifdef WITH_SIPDEBUG
onsend_route_reply=yes
#!endif
server_header="Server: kamailio 5.4"

####### Modules Section ########
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tlsa.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "outbound.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "rtimer.so"
loadmodule "json.so"
loadmodule "http_client.so"
loadmodule "jansson.so"
loadmodule "htable.so"
loadmodule "textopsx.so"
loadmodule "rtpengine.so"
loadmodule "nathelper.so"
loadmodule "path.so"

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------
# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")
modparam("ctl", "binrpc", "tcp:localhost:2046")

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "noisy_ctimer", 1)
modparam("tm", "cancel_b_method", 1)

# ----- rr params -----
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "ignore_sips", 1)
modparam("rr", "enable_double_rr", 2)

# ----- path -----
modparam("path", "enable_r2", 1)

# ----- tls params -----
modparam("tlsa", "tls_method", "TLSv1.2+")
modparam("tlsa", "verify_certificate", 0)
modparam("tlsa", "require_certificate", 0)
modparam("tlsa", "private_key", "/etc/letsencrypt/live/PUBDOMAIN/privkey.pem")
modparam("tlsa", "certificate", "/etc/letsencrypt/live/PUBDOMAIN/fullchain.pem")

# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:60000")
modparam("rtpengine", "rtpengine_disable_tout", 15)
modparam("rtpengine", "rtpengine_tout_ms", 2000)
modparam("rtpengine", "rtpengine_retr", 2)

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=14400")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

# do not follow redirects
modparam("http_client", "httpredirect", 0)
modparam("http_client", "connection_timeout", 4)
modparam("http_client", "verify_peer", 0)
modparam("http_client", "verify_host", 0)
modparam("http_client", "keep_connections", 1)

####### Routing Logic ########
request_route {
#!ifdef WITH_SIPDEBUG
        xlog("L_INFO","[R-MAIN] SIP DEBUG: $mb\n");
#!endif

        # per request initial checks
        route(REQINIT);

        # CANCEL processing
        if (is_method("CANCEL")) {
                rtpengine_manage();
                handle_ruri_alias();

                if (!t_relay_cancel()) {
                        xlog("L_INFO", "[MAIN] No matching transaction or other error on CANCEL\n");
                        sl_send_reply("500", "Internal Server Error M1");
                }

                exit;
        }

        # handle retransmissions
        if (!is_method("ACK")) {
                if (t_precheck_trans()) {
                        t_check_trans();
                        exit;
                }
                t_check_trans();
        }

        # handle requests within SIP dialogs
        route(WITHINDLG);

        if ($si=="PBXIP" && $sp=="PBXPORT") {
                if (!loose_route()) {
                        switch($rc) {
                        case -2:
                                sl_send_reply("403", "Forbidden");
                                exit;
                        }
                }

                remove_hf("Route");
                force_rport();
                $fs = "tls:PRIVATEIP:5061";
        } else {
                if(proto != TLS) {
                                        xlog("L_INFO", "[R-MAIN] rejecting non tls $ru from $si\n");
                        sl_send_reply("403", "Accepting TLS Only");
                        exit;
                }

                if (is_method("REGISTER")) {
                        remove_hf("Route");
                        add_path();
                        $du = "sip:PBXIP:PBXPORT";
                } else {
                        if ($rU == $null) {
                                sl_send_reply("484", "Address Incomplete");
                                exit;
                        }

                        $ru = "sip:" + $rU + "@PBXIP:PBXPORT";
                }

                if ($(ct{tobody.user})!=$null) {
                        $var(ctuser) = $(ct{tobody.user});
                        $var(cthost) = $si;
                        $var(ctport) = $sp;
                        remove_hf("Contact");
                        insert_hf("Contact: <sip:$var(ctuser)@PRIVATEIP:5060;alias=$var(cthost)~$var(ctport)~3>\r\n", "Call-ID");
                }

                t_on_failure("MANAGE_FAILURE");
                $fs = "udp:PRIVATEIP:5060";
        }

        route(RELAY);
        exit;
}

# Wrapper for relaying requests
route[RELAY] {
        handle_ruri_alias();

        if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
                if (!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
        }

        if (is_method("INVITE|SUBSCRIBE|UPDATE|REGISTER")) {
                        if (!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
        }

        if (is_method("INVITE")) {
                if (!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
        }

        xlog("L_INFO", "[RELAY] Relaying $ru\n");
        if (!t_relay()) {
                sl_reply_error();
        }

        exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
        # flood detection from same IP and traffic ban for a while
        # be sure you exclude checking trusted peers, such as pstn gateways
        # - local host excluded (e.g., loop to self)
        if (src_ip!=myself && src_ip!=PBXIP) {
                if ($sht(ipban=>$si)!=$null) {
                        # ip is already blocked
                        xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
                        exit;
                }

                if (!pike_check_req()) {
                        xlog("L_ALERT","[R-REQINIT]: pike blocking $rm from $fu (IP:$si:$sp)\n");
                        $sht(ipban=>$si) = 1;
                        exit;
                }
        }
#!endif

        if ($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent|friendly-scanner|sipvicious|sipsak|pplsip") {
                xlog("L_INFO","[R-REQINIT]: script kiddies from IP:$si:$sp - dropping and blocking\n");
                route(BLOCKIP);
                # sl_send_reply("200", "OK");
                exit;
        }

        if ($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
                xlog("L_INFO","[R-REQINIT]: sql injection from IP:$si:$sp - dropping\n");
                route(BLOCKIP);
                exit;
        }

        if (!mf_process_maxfwd_header("10")) {
                xlog("L_INFO","[R-REQINIT]: too many hops\n");
                sl_send_reply("483","R1 Too Many Hops");
                exit;
        }

        if (is_method("OPTIONS")){
                if (uri==myself && ($rU==$null || $rU=="kamailio")) {
                        sl_send_reply("200","Keep on Keeping on");
                        exit;
                }
        }

        if (!sanity_check("17895", "7")) {
                xlog("L_INFO","[R-REQINIT]: Malformed SIP message from $si:$sp\n");
                exit;
        }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
        if (!has_totag()) return;

        if ($si=="PBXIP" && $sp=="PBXPORT" && $(ru{param.value,alias})!=$null) {
                route(RTPMANAGE);
                route(RELAY);
                exit;
        }

        if (loose_route()) {
                if ( is_method("NOTIFY") ) {
                        record_route();
                }

                route(RTPMANAGE);
                route(RELAY);
                exit;
                        }

        if ( is_method("ACK|BYE") ) {
                route(RTPMANAGE);
                route(RELAY);
        }

        sl_send_reply("404","Not here WD1");
        exit;
}

# RTPProxy control and signaling updates for NAT traversal
route[RTPMANAGE] {
        if (has_totag()) {
                if (is_method("INVITE|UPDATE|ACK") || is_method("BYE")) {
                        if (proto==TLS) {
                                rtpengine_manage("RTP/AVP replace-origin replace-session-connection SIP-source-address ICE=remove");
                        } else {
                                rtpengine_manage("RTP/SAVP replace-origin replace-session-connection SIP-source-address ICE=remove");
                        }
                }

                t_on_reply("MANAGE_REPLY");
        } else {
                if (is_method("INVITE")) {
                record_route();
                        if (has_body("application/sdp")) {
                                if (proto==TLS) {
                                        rtpengine_manage("RTP/AVP replace-origin replace-session-connection SIP-source-address ICE=remove");
                                } else {
                                        rtpengine_manage("RTP/SAVP replace-origin replace-session-connection SIP-source-address ICE=remove");
                                }
                        }
                }
        }

        return;
}

route[BLOCKIP] {
        if (src_ip!=myself) {
                xlog("L_INFO","[R-BLOCKIP:$ci]: blocking $rm from $fu (IP:$si:$sp)\n");
                $sht(ipban=>$si) = 1;
                        }

        return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
        xdbg("new branch [$T_branch_idx] to $ru\n");
        route(RTPMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
        xdbg("incoming reply\n");
        if ($si!="PBXIP" && $sp!="PBXPORT") {
                if ($(ct{tobody.user})!=$null) {
                        xlog("L_INFO","[R-M-REPLY] adding contact alias\n");
                        $var(ctuser) = $(ct{tobody.user});
                        $var(cthost) = $si;
                        $var(ctport) = $sp;
                        remove_hf("Contact");
                        insert_hf("Contact: <sip:$var(ctuser)@PRIVATEIP:5060;alias=$var(cthost)~$var(ctport)~3>\r\n", "Call-ID");
                }
        }

        if (!is_method("REGISTER")) {
                if (status=~"[12][0-9][0-9]") {
                        route(RTPMANAGE);
                }
        }
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
        xlog("L_INFO","[R-M-FAILURE] handling failure $rs\n");
        route(RTPMANAGE);
        if (t_is_canceled()) exit;
}
